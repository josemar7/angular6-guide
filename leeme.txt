Instalar cliente: npm install -g @angular/cli@latest
Crear aplicación: ng new my-first-app
arranacar el servidor: ng serve

instalar bootstrap: npm install --save bootstrap@3
añadir bootstrap al proyecto: en angular.json, en "styles", añadir una entrada -> "node_modules/bootstrap/dist/css/bootstrap.min.css"

Crear un componente: ng generate component servers (ng g c servers)


- databinding:
output: []
input:  ()

DATABINDING
------------------------
página 1:

      <app-server-element
      *ngFor="let serverElement of serverElements"
      [srvElement]="serverElement"
      [name]="serverElement.name">
        <p #contentParagraph>
          <strong *ngIf="serverElement.type === 'server'" style="color: red">{{ serverElement.content }}</strong>
          <em *ngIf="serverElement.type === 'blueprint'">{{ serverElement.content }}</em>
        </p>
      </app-server-element>

página 2:

  <div class="panel-heading" #heading>{{ name }}</div>

component de página 2:

  @Input('srvElement') element: {type: string, name: string, content: string};
  @Input() name: string;
  @ContentChild('contentParagraph') paragraph;
  @ViewChild('heading') header: ElementRef;

página 1:

    <app-cockpit
    (serverCreated)="onServerAdded($event)"
    (bpCreated)="onBluePrintAdded($event)"></app-cockpit>

component de página 1:

  onServerAdded(serverData: {serverName: string, serverContent: string}) {
    this.serverElements.push({
      type: 'server',
      name: serverData.serverName,
      content: serverData.serverContent
    });
  }

  onBluePrintAdded(blueprintData: {serverName: string, serverContent: string}) {
    this.serverElements.push({
      type: 'blueprint',
      name: blueprintData.serverName,
      content: blueprintData.serverContent
    });
  }

  component de página 2:

    @Output() serverCreated = new EventEmitter<{serverName: string, serverContent: string}>();
    @Output('bpCreated') blueprintCreated = new EventEmitter<{serverName: string, serverContent: string}>();

    onAddServer(serverNameInput: HTMLInputElement) {
      this.serverCreated.emit({serverName: serverNameInput.value,
        serverContent: this.serverContentInput.nativeElement.value});
    }

    onAddBlueprint(serverNameInput: HTMLInputElement) {
      this.blueprintCreated.emit({serverName: serverNameInput.value,
        serverContent: this.serverContentInput.nativeElement.value});
    }


ROUNTING
------------------

1) Crear un módulo nuevo así:

const appRoutes: Routes = [
  { path: '', redirectTo: '/recipes', pathMatch: 'full' },
  { path: 'recipes', component: RecipesComponent },
  { path: 'shopping-list', component: ShoppingListComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(appRoutes)],
  exports: [RouterModule]
})
export class AppRoutingMoule {

}

2) importarlo en app.module.ts

3) en el html:
<li routerLinkActive="active"><a routerLink="/recipes">Recipes</a></li>

3) rutas hijas:

  { path: 'recipes', component: RecipesComponent, children: [
    { path: '', component: RecipeStartComponent },
    { path: ':id', component: RecipeDetailComponent }
  ] },

4) en el html:
<router-outlet></router-outlet>

5) parámetros (Component):

constructor(private route: ActivatedRoute) { }

  ngOnInit() {
    this.route.params.subscribe(
      (params: Params) => {
        this.id = +params['id'];
        this.recipe = this.recipeService.getRecipe(this.id);
      }
    );
  }

6) parámetros (HTML):

<a
style="cursor: pointer;"
[routerLink]="[index]"
class="list-group-item clearfix">

OBSERVABLE
--------------

1) En un Servicio

import { Subject } from 'rxjs/Subject'

userActivated = new Subject();

2) Llamada al servicio, para pasar un parámetro:

this.usersService.userActivated.next(this.id);

3) Suscribir el Subject (Observable):

    this.usersService.userActivated.subscribe(
      (id: number) => {
        console.log(id);
      }
    );

FORMS TEMPLATES
---------------------

1) importar FormsModule

2) En el HTML:
      <form (ngSubmit)="onSubmit()"
      #f="ngForm">
      ............
      <input type="email"
      id="email"
      class="form-control"
      ngModel
      name="email"
      required
      email
      #email="ngModel">
      <span class="help-block"
      *ngIf="!email.valid && email.touched">Please enter a valid email!</span>

  Para fijar un valor por defecto:
  [ngModel]="defaultQuestion"

3) En el Component:

  - Referencia al form:  @ViewChild('f') signup: NgForm;
  - Submit:
      onSubmit() {
        this.submitted = true;
        this.user.username = this.signup.value.userData.username;
        this.user.email = this.signup.value.userData.email;
        this.user.secretQuestion = this.signup.value.secret;
        this.user.answer = this.signup.value.questionAnswer;
        this.user.gender = this.signup.value.gender;
        this.signup.reset();
      }
  - Establecer algún valor:
      this.signup.form.patchValue({
        userData: {
          username: suggestedName
        }
      });
  - Establecer todos los valores:
     this.signup.setValue({
       userData: {
         username: suggestedName,
         email: ''
       },
       secret: 'pet',
       questionAnswer: '',
       gender: 'male'
     });


FORMS REACTIVE
------------------------

1) Incluir import ReactiveFormsModule en el Module

2) En el HTML:

  <div class="form-group">
    <label for="email">email</label>
    <input
      type="text"
      id="email"
      formControlName="email"
      class="form-control">
    <span class="help-block"
      *ngIf="!signupForm.get('userData.email').valid && signupForm.get('userData.email').touched">
      Please enter a valid email!</span>
  </div>

  3) En el Component:

    - Definición del form:
    signupForm: FormGroup;

    - En el método ngOnInit:

      this.signupForm = new FormGroup({
        'userData': new FormGroup({
          'username': new FormControl(null, [Validators.required, this.forbiddenNames.bind(this)]),
          'email': new FormControl(null, [Validators.required, Validators.email], this.forbiddenEmails)
        }),
        'gender': new FormControl('male'),
        'hobbies': new FormArray([])
      });

  4) Formulario dinámico:

    - En el HTML:

      <div formArrayName="hobbies">
        <h4>Your Hobbies</h4>
        <button class="btn btn-default"
        type="button"
        (click)="onAddHobby()">Add Hobby</button>
        <div class="form-group"
        *ngFor="let hobbyControl of signupForm.get('hobbies').controls; let i = index">
          <input type="text"
          class="form-control"
          [formControlName]="i">
        </div>
      </div>

    - En el Component:

      onAddHobby() {
        const control = new FormControl(null, Validators.required);
        (<FormArray>this.signupForm.get('hobbies')).push(control);
      }

  5) Validators personalizados:

    - En el Component:

      forbiddenNames(control: FormControl): {[s: string]: boolean} {
        if (this.forbiddenUsernames.indexOf(control.value) !== -1) {
          return {'nameIsForbidden': true};
        }
        return null;
      }

      ...

      'username': new FormControl(null, [Validators.required, this.forbiddenNames.bind(this)]),
      "bind(this)" es para no perder la referencia del 'this' dentro del método







